
--!strict
-- This script provides the core logic for an NPC to find a target and aim at its head.
-- It is designed to be placed inside a Script object within your NPC character model.

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local NPC = script.Parent
local NPC_Humanoid = NPC:FindFirstChildOfClass("Humanoid")
local NPC_Head = NPC:FindFirstChild("Head")
local NPC_Torso = NPC:FindFirstChild("Torso")

-- The 'Neck' Motor6D is crucial for head rotation.
local Neck = NPC_Torso:FindFirstChild("Neck")

-- The maximum distance the NPC can "see" a player.
local DETECTION_RANGE = 250 -- Stated max detection range of 250 studs

-- The maximum distance the NPC will actually auto-aim.
local AIMING_RANGE = 70 -- Stated auto-aim range of 70 studs

-- We'll use this to prevent the raycast from hitting the NPC itself.
local raycastParams = RaycastParams.new()
raycastParams.FilterType = Enum.RaycastFilterType.Exclude
raycastParams.FilterDescendantsInstances = {NPC}

-- Variable to store the current connection to the Heartbeat loop.
local heartbeatConnection = nil

-- Function to start the auto-aim behavior.
local function startAiming()
	if heartbeatConnection then
		-- Already running, do nothing.
		return
	end
	heartbeatConnection = RunService.Heartbeat:Connect(function()
		if not NPC_Humanoid or not NPC_Head or not Neck or not NPC.HumanoidRootPart then
			return
		end
		
		local targetCharacter = nil
		local closestDistance = DETECTION_RANGE
		
		-- Find the closest valid target within the detection range.
		for _, player in ipairs(Players:GetPlayers()) do
			local character = player.Character
			local humanoid = character and character:FindFirstChildOfClass("Humanoid")
			local rootPart = character and character:FindFirstChild("HumanoidRootPart")
			
			if character and humanoid and rootPart and humanoid.Health > 0 and not character:FindFirstChild("ForceField") then
				local distance = (NPC.HumanoidRootPart.Position - rootPart.Position).Magnitude
				if distance < closestDistance then
					
					-- Check for a clear line of sight to the target's head.
					local targetHead = character:FindFirstChild("Head")
					if targetHead then
						local npcToTargetVector = targetHead.Position - NPC_Head.Position
						local rayDirection = npcToTargetVector.Unit * distance
						local raycastResult = Workspace:Raycast(NPC_Head.Position, rayDirection, raycastParams)
						
						-- If the raycast hits the target's head, we have a valid line of sight.
						if raycastResult and raycastResult.Instance.Parent == targetCharacter then
							closestDistance = distance
							targetCharacter = character
						end
					end
				end
			end
		end
		
		-- Now that we have the closest, non-obstructed target, let's aim if they are in range.
		if targetCharacter and closestDistance <= AIMING_RANGE then
			local targetHead = targetCharacter:FindFirstChild("Head")
			
			-- Aim the NPC's head by adjusting the Neck Motor6D C0.
			-- This provides a realistic head-tracking effect.
			if Neck then
				local headAimCFrame = CFrame.lookAt(Neck.C0.Position, targetHead.Position)
				Neck.C0 = Neck.C0:Lerp(headAimCFrame, 0.5) -- Using Lerp for smoother movement
			end
			
			-- You can add your weapon or torso aiming logic here.
			-- Example: Make the entire torso face the target's head.
			if NPC_Torso then
				local torsoAimCFrame = CFrame.lookAt(NPC_Torso.Position, targetHead.Position)
				NPC_Torso.CFrame = torsoAimCFrame
			end
		end
	end)
end

-- Function to stop the auto-aim behavior.
local function stopAiming()
	if heartbeatConnection then
		heartbeatConnection:Disconnect()
		heartbeatConnection = nil
	end
end

-- Check if the UI switch is enabled and run the corresponding function.
-- This part is just for demonstration within a Roblox context, not part of the Lua logic itself.
-- You would tie startAiming() and stopAiming() to your game's UI events.

-- Example: Let's assume you have a value object in your NPC model named "AutoAimEnabled"
-- You would change this value via a remote event from the player's UI.

local autoAimEnabled = script.Parent:FindFirstChild("AutoAimEnabled")

if autoAimEnabled and autoAimEnabled:IsA("BoolValue") then
	if autoAimEnabled.Value == true then
		startAiming()
	end
	autoAimEnabled.Changed:Connect(function()
		if autoAimEnabled.Value == true then
			startAiming()
		else
			stopAiming()
		end
	end)
end
            
